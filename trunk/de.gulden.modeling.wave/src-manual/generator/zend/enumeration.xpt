«REM»
    WAVE - Web Application Visual Environment
    A Graphical Modeling Framework (GMF) Plugin for Eclipse
    Copyright Jens Gulden, 2009, mail@jensgulden.de
    Licensed under the GNU General Public License (GPL)
«ENDREM»

«IMPORT wave»

«EXTENSION org::eclipse::xtend::util::stdlib::globalvar»
«EXTENSION generator::common»
«EXTENSION generator::sql::sql»

«REM»
------------------------------------------------------------------------------
--- Enumeration
------------------------------------------------------------------------------
«ENDREM»


«DEFINE enumeration FOR Enumeration»
<?php
/**
 * Enumeration: "«this.name»"
 *
 «EXPAND model::commentHeader» */

/*enum*/ class «this.name» {

protected $_index;
protected $_name;
protected $_value;
protected $_labelIndex;

public function __construct($index, $name, $value, $labelIndex) {
	$this->_index = $index;
	$this->_name = $name;
	$this->_value = $value;
	$this->_labelIndex = $labelIndex;
}

public function __toString() {
	return $this->_name;
	//return $this->_labelIndex ? _msg($this->_labelIndex) : $this->_name;
}

public static $_literals;
public static $_literalsByName;

«FOREACH this.literals AS literal ITERATOR i»
public static $«literal.name»;
«ENDFOREACH»

public static function getLiterals() {
	return array_slice(self::$_literals, 1);
}

public function getName() {
	return $this->_name;
}

public function getLabel() {
	return $this->_name; // TODO ###
}

/*
protected static $_literals = Array(
	null,«FOREACH this.literals AS literal SEPARATOR ", "»
	"«literal.name»"«ENDFOREACH»
);

protected static $_labels = Array(
	null,«FOREACH this.literals AS literal SEPARATOR ", "»
	«IF (literal.label != null)»«literal.label.labelIndex()»«ELSE»null«ENDIF»«ENDFOREACH»
);

protected static $_values = Array(
	null,«FOREACH this.literals AS literal SEPARATOR ", "»
	«literal.value.orNull()»«ENDFOREACH»
);

protected static $_indices = Array(
	null,«FOREACH this.literals AS literal ITERATOR i SEPARATOR ", "»
	"«literal.name»" => «i.counter1»«ENDFOREACH»
);

protected static $_indicesByValue = Array(
	null,«FOREACH this.literals AS literal ITERATOR i SEPARATOR ", "»
	«literal.value.orNull()» => «i.counter1»«ENDFOREACH»
);


public static function getName($index) {
	return self::$_literals[$index];
}
public static function getLabel($index) {
	return _msg(self::$_labels[$index]); //self::$_labels[$index];
}
public static function getValue($index) {
	return self::$_values[$index];
}
public static function getIndex($name) {
	return self::$_indices[$name];
}
//public static function getIndexByLabel($label) {
//	return self::$_indicesByLabel[$label];
//}
public static function getIndexByValue($value) {
	return self::$_indicesByValue[$value];
}*/

public static function _getByName($name) {
	return self::$_literalsByName[$name];
}

}

// initialize static fields in «this.name»
«this.name»::$_literals = Array();  
«this.name»::$_literalsByName = Array();  
«this.name»::$_literals[0] = null; 
«FOREACH this.literals AS literal ITERATOR i»
«this.name»::$«literal.name» = new «this.name»(«i.counter1», "«literal.name»", "«literal.value»", «literal.label.labelIndex()»); 
«this.name»::$_literals[«i.counter1»] = «this.name»::$«literal.name»;
«this.name»::$_literalsByName["«literal.name»"] = «this.name»::$«literal.name»;
«ENDFOREACH»

?>
«ENDDEFINE»
