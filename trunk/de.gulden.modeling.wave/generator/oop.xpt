«REM»
    WAVE - Web Application Visual Environment
    A Graphical Modeling Framework (GMF) Plugin for Eclipse
    Copyright Jens Gulden, 2009, mail@jensgulden.de
    Licensed under the GNU General Public License (GPL)
«ENDREM»

«IMPORT wave»

«EXTENSION org::eclipse::xtend::util::stdlib::globalvar»
«EXTENSION common»
«EXTENSION sql::sql»

«REM»
«EXTENSION zend::commonZend»
«ENDREM»

«REM» ---   language-specific templates   --- «ENDREM»

«REM»TODO make language-specific templates 'abstract' (by delivering empty content), and configure language specific output via AROUND templates«ENDREM»

«DEFINE className FOR OOPClassifier»«this.codeName()»«ENDDEFINE»

«REM» --- END language-specific templates --- «ENDREM»

«DEFINE attributes FOR Classifier»«FOREACH this.attributes AS attr»«IF attr.isFinal && attr.isStatic»
const «attr.name» = «attr.defaultValue»;«ELSE»
/**
 * Attribute '«attr.name»'
 */
//«this.metaclass()»
«attr.visibility()»«IF attr.isStatic» static«ENDIF» «attr.oopType()» «EXPAND attribute FOR attr»«IF (this.isClass()) && (attr.type == "array")» = array()«ENDIF»;«IF ! this.definesOperation("get"+attr.name.toFirstUpper())»
/**
 * @generated
 */
public «this.oopFunction()»«attr.oopType()» get«attr.name.toFirstUpper()»() {
	return «this.oopThisRef()»«attr.name»;
} 
«ENDIF»«IF ! this.definesOperation("set"+attr.name.toFirstUpper())»
/**
 * @generated
 */
public «this.oopFunction()»«"void".oopType()» set«attr.name.toFirstUpper()»(«attr.oopType()» «attr.oopVar()») {
	«this.oopThisRef()»«attr.name»=«attr.oopVar()»;
} 
«ENDIF»«ENDIF»«ENDFOREACH»«ENDDEFINE»

«DEFINE operations FOR Classifier»«FOREACH this.operations AS op»
«op.visibility()» «EXPAND modifiers FOR op»«this.oopFunction()»«IF ! (op.name == ((OOPClassifier)op.eContainer).name)»«op.oopType()»«ELSE»/*constructor*/«ENDIF» «op.name»(«EXPAND parameters FOR op»)«IF op.throws.is()» throws «op.throws»«ENDIF»«IF op.isAbstract || this.isInterface()»;«ELSE»
/*begin «op.signatureID()»*/
{
	«op.prepareCode()»«IF (( ! op.code.is()) && ( ! op.returnType.isVoid()))»
	return «op.returnType.defaultReturnValue()»;
	«ENDIF»
}
/*end «op.signatureID()»*/
«ENDIF»
«ENDFOREACH»«ENDDEFINE»

«DEFINE associations FOR Class-»
	«FOREACH this.associations() AS assoc-»
		«IF assoc.isNavigable(this)-»
/**
 * Association '«assoc.name»'
 * «this.ingoingMultiplicity(assoc)» «IF (assoc.direction.toString() != "<-->")»-->«ELSE»--«ENDIF» «this.outgoingMultiplicity(assoc)»
 * @generated
 */
protected «IF this.isOutgoingMulti(assoc)»«this.outgoingType(assoc).oopArrayType()»«ELSE»«IF targetPHP()»«this.oopIntType()»«ELSE»«this.outgoingType(assoc).oopType()»«ENDIF»«ENDIF» «this.outgoingName(assoc).oopVar()»«IF this.isOutgoingMulti(assoc)» «this.outgoingType(assoc).oopArrayInitialValue()»«REM»«IF this.isPersistent»null«ELSE»array()«ENDIF»«ENDREM»«ENDIF»;
			«IF ! this.definesOperation("get"+this.outgoingName(assoc).toFirstUpper())-»
				«IF ! this.isOutgoingMulti(assoc)»
/**
 * @generated
 */
public «this.oopFunction()»«this.outgoingType(assoc).oopType()» get«this.outgoingName(assoc).toFirstUpper()»() {
	return «this.oopThisRef()»«this.outgoingName(assoc)»; 
} 
				«ELSE»
/**
 * @generated
 */
public «this.oopFunction()»«this.outgoingType(assoc).oopArray()» get«this.outgoingName(assoc).toFirstUpper()»() {
	return «this.oopThisRef()»«this.outgoingName(assoc)»; 
} 

/**
 * @generated
 */
public «this.oopFunction()»«this.oopVoid()» set«this.outgoingName(assoc).toFirstUpper()»(«this.outgoingType(assoc).oopArray()» «"values".oopVar()») {
	«this.oopThisRef()»«this.outgoingName(assoc)» = «"values".oopVar()»; 
} 
				«ENDIF» 
			«ENDIF-»
				«IF ! this.isOutgoingMulti(assoc)-»
					«IF ! this.definesOperation("set"+this.outgoingName(assoc).toFirstUpper())-»
/**
 * @generated
 */
public «this.oopFunction()»«this.oopVoid()» set«this.outgoingName(assoc).toFirstUpper()»(«EXPAND className FOR this.outgoingType(assoc)» «this.outgoingName(assoc).oopVar()»«IF targetPHP()»=null«ENDIF») {
	«this.oopThisRef()»«this.outgoingName(assoc)» = «this.outgoingName(assoc).oopVar()»;
						«IF assoc.isBidirectional()-»«REM» bi-drectional 1:1 «ENDREM»
	if ((«this.outgoingName(assoc).oopVar()» != null) && («this.outgoingName(assoc).oopVar()» != «this.oopThisRef()»«this.outgoingName(assoc)»)) {
							«IF ! assoc.isIngoingMulti(this)-»
		«this.outgoingName(assoc).oopVarRef()»set«this.ingoingName(assoc).toFirstUpper()»(«this.oopThis()»); // set back-reference
							«ELSE-» 
		«this.outgoingName(assoc).oopVarRef()»add«this.ingoingName(assoc).toFirstUpper().removePluralS()»(«this.oopThis()»); // add back-reference
							«ENDIF-» 
	}
						«ENDIF-» 
} 
					«ENDIF-» 
				«ELSE»
					«IF ! this.definesOperation("add"+this.outgoingName(assoc).toFirstUpper().removePluralS())-»
/**
 * @generated
 */
public «this.oopFunction()»«this.oopVoid()» add«this.outgoingName(assoc).toFirstUpper().removePluralS()»(«EXPAND className FOR this.outgoingType(assoc)» «this.outgoingName(assoc).removePluralS().oopVar()») {
						«IF this.isPersistent-» 
	«this.oopThisRef()»get«this.outgoingName(assoc).toFirstUpper()»(); // make sure is initialized
						«ENDIF-» 
	if ( ! «(this.oopThisRef()+this.outgoingName(assoc)).oopInArrayCondition( this.outgoingName(assoc).removePluralS().oopVar() )» ) {
		«(this.oopThisRef()+this.outgoingName(assoc)).oopAddToArray( this.outgoingName(assoc).removePluralS().oopVar() )»;
							«IF assoc.isBidirectional()-»«REM» bi-drectional 1:m «ENDREM»
								«IF ! assoc.isIngoingMulti(this)-»
		«this.outgoingName(assoc).removePluralS().oopVarRef()»set«this.ingoingName(assoc).toFirstUpper()»(«this.oopThis()»); // set back-reference
								«ELSE-» 
		«this.outgoingName(assoc).removePluralS().oopVarRef()»add«this.ingoingName(assoc).toFirstUpper().removePluralS()»(«this.oopThis()»); // add back-reference (!!)
								«ENDIF-» 
							«ENDIF-» 
	}
} 
					«ENDIF-» 
				«ENDIF-»
				
				
		«IF this.isOutgoingMulti(assoc)»
				 
			«IF ! this.definesOperation("remove"+this.outgoingName(assoc).toFirstUpper().removePluralS())-»
/**
 * @generated
 */
public «this.oopFunction()»«this.oopVoid()» remove«this.outgoingName(assoc).toFirstUpper().removePluralS()»(«EXPAND className FOR this.outgoingType(assoc)» «this.outgoingName(assoc).removePluralS().oopVar()») {
						«IF (!this.isInterface()) && this.isPersistent-» 
	«this.oopThisRef()»get«this.outgoingName(assoc).toFirstUpper()»(); // make sure is initialized
						«ENDIF-»
	«IF targetPHP()» 
	if ( in_array( «this.outgoingName(assoc).removePluralS().oopVar()», «this.oopThisRef()»«this.outgoingName(assoc)» ) ) {
		$found = -1;
		for ($i = 0; $i < count(«this.oopThisRef()»«this.outgoingName(assoc)»); $i++)
		{
			if ($«this.outgoingName(assoc).removePluralS()» == «this.oopThisRef()»«this.outgoingName(assoc)»[$i])
			{
				$found = $i;
			}
		}
		unset( «this.oopThisRef()»«this.outgoingName(assoc)»[$found] );
		
	«ELSE»
	«this.oopThisRef()»«this.outgoingName(assoc)».remove(«this.outgoingName(assoc).removePluralS().oopVar()»); 
	«ENDIF» 
		«REM» TODO
		
							«IF assoc.isBidirectional()-»«xREM» bi-drectional 1:m «xENDREM»
								«IF ! this.isIngoingMulti(assoc)-»
		«this.outgoingName(assoc).oopVarRef()»set«this.ingoingName(assoc).toFirstUpper()»(null); // remove back-reference
								«ELSE-»
		«this.outgoingName(assoc).removePluralS().oopVarRef()»remove«this.ingoingName(assoc).toFirstUpper()»(«this.oopThis()»); // remove back-reference
								«ENDIF-»
							«ENDIF-»
							
		«ENDREM»
	«IF targetPHP()» 
	}
	«ENDIF»
} 
			«ENDIF-» 
			«IF ! this.definesOperation("removeAll"+this.outgoingName(assoc).toFirstUpper()+"s")-»
/**
 * @generated
 */
public «this.oopFunction()»«this.oopVoid()» removeAll«this.outgoingName(assoc).toFirstUpper()»() {
	«IF targetPHP()» 
	foreach («this.oopThisRef()»get«this.outgoingName(assoc).toFirstUpper()»() as $del=>$val) {
	«ELSE»
	for («this.oopFunction()»«this.outgoingType(assoc).oopType()» del : Collections.unmodifiableList(«this.oopThisRef()»get«this.outgoingName(assoc).toFirstUpper()»()) ) {
	«ENDIF»
		«this.oopThisRef()»remove«this.outgoingName(assoc).toFirstUpper().removePluralS()»(«"del".oopVar()»);
	}
} 
			«ENDIF-»
		«ENDIF-»
		«ENDIF-»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE parameters FOR Operation»«FOREACH this.parameters AS param SEPARATOR ", "»«param.oopType()» «EXPAND attribute FOR param»«ENDFOREACH»«ENDDEFINE»

«DEFINE parametersFromHttp FOR Operation-»
	// --- HTTP parameters ---
	«FOREACH this.parameters AS param-»
		«IF param.type.isPrimitiveType()-»
			«IF param.type.isArrayType()-»
	«param.oopType()» $«param.name» = $_REQUEST["«param.name»"];
			«ELSE-»
	«IF param.type.is()»«param.oopType()» «ENDIF»$«param.name» = «IF param.type.typeCastFunction().is()»«param.type.typeCastFunction()»($_REQUEST["«param.name»"])«ELSE»$_REQUEST["«param.name»"]«ENDIF»;
			«ENDIF-»
		«ELSE-»
			«IF param.type.isArrayType()-»
	«param.oopType()» $«param.name» = «param.oopType()»::_getAllFromHttp("«param.name»_");
			«ELSE-»
	«param.oopType()» $«param.name» = «param.oopType()»::_getFromHttp("«param.name»_");
			«ENDIF-»
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE attribute FOR Attribute»«this.oopVar()»«IF this.defaultValue.is()» = «this.defaultValue»«ENDIF»«ENDDEFINE»

«DEFINE modifiers FOR OOPClassifier»«IF this.isAbstract»abstract «ENDIF»«ENDDEFINE»

«DEFINE modifiers FOR Attribute»«IF this.isFinal»final «ENDIF»«IF this.isStatic»static «ENDIF»«ENDDEFINE»

«DEFINE modifiers FOR Operation»«IF this.isAbstract»abstract «ENDIF»«IF this.isFinal»final «ENDIF»«IF this.isStatic»static «ENDIF»«ENDDEFINE»

«DEFINE imports FOR Classifier-»
	«FOREACH this.depends() AS m-»
		«EXPAND resolveImport FOR m-»
	«ENDFOREACH-»
	«FOREACH this.extends() AS m-»
		«EXPAND resolveImport FOR m-»
	«ENDFOREACH-»
	«FOREACH this.implements() AS m-»
		«EXPAND resolveImport FOR m-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE resolveImport FOR ModelMember-»«REM»nop«ENDREM»«ENDDEFINE»

«DEFINE resolveImport FOR Class-»
include_once($_rel."/«this.sourceFileName()»");
«ENDDEFINE»

«DEFINE resolveImport FOR Interface-»
include_once($_rel."/«this.sourceFileName()»");
«ENDDEFINE»

«DEFINE resolveImport FOR Enumeration-»
include_once($_rel."/«this.sourceFileName()»");
«ENDDEFINE»

«DEFINE resolveImport FOR Package-»
	«FOREACH this.members AS m-»
		«EXPAND resolveImport FOR m-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE resolveImport FOR Include-»
«IF this.taggedValue("layoutTemplate").is()-»
«ELSE-»
include_once($_rel."/«this.sourceFileName()»");
«ENDIF-»
«ENDDEFINE»
